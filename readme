If you want to replace the html, css and js file in root document file on civetweb. 
This program would transfer file (*.html, *.css, *.js) to a corresponding ASCII char array with *.c file,
and also collect all *.c file into stringweb.h. 


How to use?
1. put your *.html into html folder(same with .css and .js)
2. make
3. the 'output' folder contain all files (including *.c and stringweb.h)
4. paste the *.c and stringweb.h into civetweb folder, meanwhile it need to modify makefile to compile them

Note:
modify the following in civetweb.c:

1.
#include "civetweb.h"
#define STRING_WEB
#if defined(STRING_WEB)
#include "stringweb.h"
#endif

2.
#if defined(STRING_WEB)
void output_body(struct mg_connection *conn, char *body_str, unsigned long size){

		unsigned long x=0;
		unsigned char ten,one,sum;
		if(size > 0){
			while(x<size){
				if((body_str[x] >= 0x30)&&(body_str[x] <= 0x39)){
					ten =body_str[x]-'0';
				}
				else{
					ten =body_str[x]-'a'+10;
				}

				if((body_str[x+1] >= 0x30)&&(body_str[x+1] <= 0x39)){
					one =body_str[x+1]-'0';
				}
				else{
					one =body_str[x+1]-'a'+10;
				}			

				sum = ten*16 + one;
				mg_write(conn, &sum, 1);

				x=x+2;
			}			
		}	
}
#endif

handle_static_file_request{

	...
	...
#if !defined(STRING_WEB)	
	if (!mg_fopen(conn, path, MG_FOPEN_MODE_READ, filep)) {
		mg_send_http_error(conn,
		                   500,
		                   "Error: Cannot open file\nfopen(%s): %s",
		                   path,
		                   strerror(ERRNO));
		return;
	}
	fclose_on_exec(&filep->access, conn);
#endif
	...
	...
	if (!is_head_request) {
#if defined(USE_ZLIB)
		if (allow_on_the_fly_compression) {
			/* Compress and send */
			send_compressed_data(conn, filep);
		} else
#endif
		{
#if defined(STRING_WEB)
			unsigned long length;
			char *ptr;
			
			if( (ptr=strstr(path,"/css")) ){		
				if( (ptr=strstr(path,"/bootstrap.min.css")) ){
					if(bootstrap_min_css[0] != '\0'){	
						length = strlen(bootstrap_min_css);
						output_body(conn, bootstrap_min_css, length);
					}					
				}
				else if( (ptr=strstr(path,"/switch.css")) ){
					if(switch_css[0] != '\0'){	
						length = strlen(switch_css);
						output_body(conn, switch_css, length);
					}											
				}
				else if( (ptr=strstr(path,"/bootstrap-slider.min.css")) ){
					if(bootstrap_slider_min_css[0] != '\0'){	
						length = strlen(bootstrap_slider_min_css);
						output_body(conn, bootstrap_slider_min_css, length);
					}															
				}
				else if( (ptr=strstr(path,"/jquery.bootstrap-touchspin.css")) ){	
					if(jquery_bootstrap_touchspin_css[0] != '\0'){	
						length = strlen(jquery_bootstrap_touchspin_css);
						output_body(conn, jquery_bootstrap_touchspin_css, length);
					}								
				}				
			}
			else if( (ptr=strstr(path,"/js")) ){	
				if( (ptr=strstr(path,"/jquery.min.js")) ){
					if(jquery_min_js[0] != '\0'){	
						length = strlen(jquery_min_js);
						output_body(conn, jquery_min_js, length);
					}								
				}
				else if( (ptr=strstr(path,"/bootstrap.min.js")) ){
					if(bootstrap_min_js[0] != '\0'){	
						length = strlen(bootstrap_min_js);
						output_body(conn, bootstrap_min_js, length);
					}								
				}
				else if( (ptr=strstr(path,"/bootstrap-slider.min.js")) ){
					if(bootstrap_slider_min_js[0] != '\0'){	
						length = strlen(bootstrap_slider_min_js);
						output_body(conn, bootstrap_slider_min_js, length);
					}									
				}
				else if( (ptr=strstr(path,"/jquery.bootstrap-touchspin.js")) ){
					if(jquery_bootstrap_touchspin_js[0] != '\0'){	
						length = strlen(jquery_bootstrap_touchspin_js);
						output_body(conn, jquery_bootstrap_touchspin_js, length);
					}														
				}
			}
			else{
				if( (ptr=strstr(path,"/file_upload.html")) ){
					if(file_upload_html[0] != '\0'){	
						length = strlen(file_upload_html);
						output_body(conn, file_upload_html, length);
					}
				}				
				else if( (ptr=strstr(path,"/blank.html")) ){
					if(blank_html[0] != '\0'){	
						length = strlen(blank_html);
						output_body(conn, blank_html, length);
					}
				}
				else{
					if(index_html[0] != '\0'){	
						length = strlen(index_html);
						output_body(conn, index_html, length);
					}					
				}		
			}
#else			
			/* Send file directly */
			send_file_data(conn, filep, r1, cl);
#endif			
		}
	}
#if !defined(STRING_WEB)	
	(void)mg_fclose(&filep->access); /* ignore error on read only file */
#endif	

3.
		/* 5.2.2. No callback is responsible for this request. The URI
		 * addresses a file based resource (static content or Lua/cgi
		 * scripts in the file system). */
		is_callback_resource = 0;
		interpret_uri(conn,
		              path,
		              sizeof(path),
		              &file.stat,
		              &is_found,
		              &is_script_resource,
		              &is_websocket_request,
		              &is_put_or_delete_request);
#if defined(STRING_WEB)		
		is_found =1;
		file.stat.is_directory =0;
#endif	



